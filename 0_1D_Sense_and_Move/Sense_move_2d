{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "#define the world that the robot live\n",
    "p = []\n",
    "#p = [0,1,0,0,0]\n",
    "world = ['green','red','red','green','green']\n",
    "measurements = ['red','green']\n",
    "motions = [1,2]\n",
    "n = 5\n",
    "\n",
    "#initial probability\n",
    "for i in range(n):\n",
    "    p.append(1/n)\n",
    "\n",
    "#loaction probability\n",
    "pHit = 0.6\n",
    "pMiss = 0.2\n",
    "\n",
    "#inaccurate movement, convection\n",
    "pExact = 0.8\n",
    "pOvershoot = 0.1\n",
    "pUndershoot = 0.1\n",
    "\n",
    "#the robot sense the world, return normalized probability\n",
    "def sense(p,measurement,world):\n",
    "    for i in range(len(p)):\n",
    "        if world[i] == measurement:\n",
    "            p[i] = p[i] * pHit\n",
    "        else:\n",
    "            p[i] = p[i] * pMiss\n",
    "    normalize(p)\n",
    "    return p\n",
    "\n",
    "#the robot move u steps, return normalized probability\n",
    "def move(p,u):\n",
    "    u = u % 5\n",
    "    q = []\n",
    "    for i in range(len(p)):\n",
    "        q.append(0)\n",
    "    for j in range(len(q)):\n",
    "        q[((j+u)%n)] = p[(j-1)%5] * pOvershoot + p[j] * pExact + p[(j+1)%5] * pUndershoot\n",
    "    normalize(q)\n",
    "    return q\n",
    "\n",
    "#normalize the probability\n",
    "def normalize(p):\n",
    "    sum = 0\n",
    "    for i in range(len(p)):\n",
    "        sum += p[i]\n",
    "    for j in range(len(p)):\n",
    "        p[j] = p[j] / sum\n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sense 1 [0.1111111111111111, 0.3333333333333332, 0.3333333333333332, 0.1111111111111111, 0.1111111111111111]\n",
      "move 1 [0.11111111111111115, 0.13333333333333336, 0.31111111111111106, 0.31111111111111106, 0.13333333333333333]\n",
      "sense 2 [0.15789473684210528, 0.06315789473684212, 0.14736842105263157, 0.4421052631578946, 0.18947368421052632]\n",
      "move 2 [0.38736842105263153, 0.21157894736842103, 0.1515789473684211, 0.08105263157894739, 0.16842105263157892]\n"
     ]
    }
   ],
   "source": [
    "#make move k times and sense k times\n",
    "for k in range(len(measurements)):\n",
    "    p = sense(p,measurements[k],world)\n",
    "    print('sense',k+1,p)\n",
    "    p = move(p,motions[k])\n",
    "    print('move',k+1,p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
